name: Fetch and Send Deployment Data

on:
  workflow_dispatch:
    inputs:
      config:
        description: 'JSON input configuration for fetching Workflow Runs'
        required: true
        type: string
      port_payload:
        required: true
        description: Port's payload including context (blueprint, run id, etc.)

jobs:
  fetch-deployments:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Inform execution start
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.DORA_PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.DORA_PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(inputs.port_payload).runId}}
          logMessage: "Starting deployment data collection..."

      - name: Fetch Port Access Token
        id: fetch_port_token
        run: |
          PORT_ACCESS_TOKEN=$(curl -s -L 'https://api.getport.io/v1/auth/access_token' \
            -H 'Content-Type: application/json' \
            -H 'Accept: application/json' \
            -d '{
              "clientId": "${{ secrets.DORA_PORT_CLIENT_ID }}",
              "clientSecret": "${{ secrets.DORA_PORT_CLIENT_SECRET }}"
            }' | jq -r '.accessToken')
          echo "PORT_ACCESS_TOKEN=$PORT_ACCESS_TOKEN" >> "$GITHUB_ENV"

      - name: Parse Input Configuration
        id: parse_config
        run: |
          echo '${{ inputs.config }}' > config.json
          CONFIG_JSON=$(jq -c . config.json)  # Proper JSON parsing
          echo "CONFIG_JSON=$CONFIG_JSON" >> "$GITHUB_ENV"

      - name: Extract Filters from JSON
        id: extract_filters
        run: |
          CONFIG_JSON=$(echo '${{ env.CONFIG_JSON }}' | jq -c .)
          
          DEPLOY_FIELDS=$(echo "$CONFIG_JSON" | jq -c '.dep_rules_fields // []')
          ENV_OP=$(echo "$CONFIG_JSON" | jq -r '.dep_rules_env_op // empty')
          ENV_VALUES=$(echo "$CONFIG_JSON" | jq -r 'if .dep_rules_env_str then .dep_rules_env_str | join(" ") else "" end')
          REPO_OP=$(echo "$CONFIG_JSON" | jq -r '.dep_rules_repo_op // empty')

          # Handle repository filter based on operation type
          if [[ "$REPO_OP" == "is" || "$REPO_OP" == "isn't" ]]; then
            # Extract repository identifiers when operation is "is" or "isn't"
            REPO_VALUES=$(echo "$CONFIG_JSON" | jq -r 'if .dep_rules_repository then .dep_rules_repository | map(.identifier) | join(" ") else "" end')
          else
            # Use dep_rules_repo_str for other operations
            REPO_VALUES=$(echo "$CONFIG_JSON" | jq -r '.dep_rules_repo_str // ""')
          fi

          echo "DEPLOY_FIELDS=$DEPLOY_FIELDS" >> "$GITHUB_ENV"
          echo "ENV_OP=$ENV_OP" >> "$GITHUB_ENV"
          echo "ENV_VALUES=$ENV_VALUES" >> "$GITHUB_ENV"
          echo "REPO_OP=$REPO_OP" >> "$GITHUB_ENV"
          echo "REPO_VALUES=$REPO_VALUES" >> "$GITHUB_ENV"

      - name: Fetch Repositories
        if: ${{ !contains(env.DEPLOY_FIELDS, 'Repository') && !contains(env.REPO_OP, 'is') }}
        id: fetch_repos
        run: |
          GH_TOKEN=${{ secrets.DORA_GITHUB_TOKEN }}
          REPOS=()
          PAGE=1
          ORG=${{ github.repository_owner }}

          while :; do
            RESPONSE=$(curl -s -H "Authorization: token $GH_TOKEN" \
              "https://api.github.com/users/$ORG/repos?per_page=100&page=$PAGE")

            NEW_REPOS=$(echo "$RESPONSE" | jq -r '.[].full_name')
            [[ -z "$NEW_REPOS" ]] && break
            REPOS+=($NEW_REPOS)
            ((PAGE++))
          done
          echo "REPO_LIST=${REPOS[*]}" >> "$GITHUB_ENV"

      - name: Set Filtered Repositories
        if: ${{ contains(env.DEPLOY_FIELDS, 'Repository') && contains(env.REPO_OP, 'is') }}
        run: |
          echo "REPO_LIST=$REPO_VALUES" >> "$GITHUB_ENV"

      - name: Fetch Deployments
        id: upsert_deployment_entity
        run: |
          GH_TOKEN=${{ secrets.DORA_GITHUB_TOKEN }}
          REPOS=(${{ env.REPO_LIST }})
          CUTOFF_DATE=$(date -d '3 months ago' --utc +%Y-%m-%dT%H:%M:%SZ)
          BLUEPRINT_ID="gh_deployment"
      
          for REPO in "${REPOS[@]}"; do
            echo "Processing repo: $REPO"
            PAGE=1
            while true; do
              RESPONSE=$(curl -s -H "Authorization: token $GH_TOKEN" \
                "https://api.github.com/repos/$REPO/deployments?per_page=100&page=$PAGE")
              DEPLOYMENTS=$(echo "$RESPONSE" | jq -c '.[]?')
              [[ -z "$DEPLOYMENTS" ]] && break
      
              while IFS= read -r DEPLOYMENT; do
                CREATED_AT=$(echo "$DEPLOYMENT" | jq -r '.created_at // empty')
                echo "Processing Deployment ID: $(echo "$DEPLOYMENT" | jq -r '.id')"
                echo "CREATED_AT: $CREATED_AT | CUTOFF_DATE: $CUTOFF_DATE"
      
                if [[ "$CREATED_AT" < "$CUTOFF_DATE" ]]; then
                  echo "Skipping old deployment (before cutoff date)."
                  break 2
                fi
      
                MATCH=false  # Default to false
                ENVIRONMENT=$(echo "$DEPLOYMENT" | jq -r '.environment // empty')
                REPO_NAME=$(echo "$REPO" | awk -F/ '{print $2}')
      
                echo "ENVIRONMENT: $ENVIRONMENT | ENV_VALUES: $ENV_VALUES"
                echo "REPO_NAME: $REPO_NAME | REPO_VALUES: $REPO_VALUES"
                
      
                # ENVIRONMENT FILTER (Check ENV_VALUES with ENV_OP)
                for ENV in $ENV_VALUES; do
                  echo "this $ENV"  # Debugging: Check how ENV is split properly
                
                  case "$ENV_OP" in
                    "equals") [[ "$ENV" == "$ENVIRONMENT" ]] && MATCH=true ;;
                    "contains") [[ "$ENVIRONMENT" == *"$ENV"* ]] && MATCH=true ;;
                    "starts with") [[ "$ENVIRONMENT" == "$ENV"* ]] && MATCH=true ;;
                    "does not contain") [[ "$ENVIRONMENT" != *"$ENV"* ]] && MATCH=true ;;
                    "does not start with") [[ "$ENVIRONMENT" != "$ENV"* ]] && MATCH=true ;;
                  esac
                
                  # Break if matched to avoid unnecessary iterations
                  [[ "$MATCH" == "true" ]] && break
                done
      
                # Repository filter - Only check if REPO_VALUES is not empty
                if [[ -n "$REPO_OP" && -n "$REPO_VALUES" && "$MATCH" == "false" ]]; then
                  case "$REPO_OP" in
                    "isn't") [[ " $REPO_VALUES " != *" $REPO "* ]] && MATCH=true ;;
                    "contains") [[ "$REPO_NAME" == *"$REPO_VALUES"* ]] && MATCH=true ;;
                    "starts with") [[ "$REPO_NAME" == "$REPO_VALUES"* ]] && MATCH=true ;;
                    "does not contain") [[ "$REPO_NAME" != *"$REPO_VALUES"* ]] && MATCH=true ;;
                    "does not start with") [[ "$REPO_NAME" != "$REPO_VALUES"* ]] && MATCH=true ;;
                  esac
                fi
      
                echo "MATCH=$MATCH"
      
                if $MATCH; then
                  DEPLOYMENT_ID=$(echo "$DEPLOYMENT" | jq -r '.id')
                  SHA=$(echo "$DEPLOYMENT" | jq -r '.sha')
                  REF=$(echo "$DEPLOYMENT" | jq -r '.ref')
                  DESCRIPTION=$(echo "$DEPLOYMENT" | jq -r '.description // empty' | sed 's/"/\\"/g')
                  PROD_ENVIRONMENT=$(echo "$DEPLOYMENT" | jq -r '.production_environment')
                  TRANSIENT_ENVIRONMENT=$(echo "$DEPLOYMENT" | jq -r '.transient_environment')
                  STATUSES_URL=$(echo "$DEPLOYMENT" | jq -r '.statuses_url // empty')
                  UPDATED_AT=$(echo "$DEPLOYMENT" | jq -r '.updated_at // empty')
                  LINK=$(echo "$DEPLOYMENT" | jq -r '.url')
                  TASK=$(echo "$DEPLOYMENT" | jq -r '.task')
      
                  echo "Sending to Port: Identifier=$REPO_NAME-$DEPLOYMENT_ID, Env=$ENVIRONMENT"
      
                  RESPONSE=$(curl -s -w "%{http_code}" -o /dev/null -X POST "https://api.getport.io/v1/blueprints/${BLUEPRINT_ID}/entities?upsert=true&merge=true&run_id=${{fromJson(inputs.port_payload).runId}}" \
                    -H "Authorization: Bearer ${{ env.PORT_ACCESS_TOKEN }}" \
                    -H "Content-Type: application/json" \
                    -d "{
                      \"identifier\": \"$REPO_NAME-$DEPLOYMENT_ID\",
                      \"title\": \"$TASK $ENVIRONMENT\",
                      \"properties\": {
                        \"environment\": \"$ENVIRONMENT\",
                        \"productionEnvironment\": \"$PROD_ENVIRONMENT\",
                        \"transientEnvironment\": \"$TRANSIENT_ENVIRONMENT\",
                        \"sha\": \"$SHA\",
                        \"ref\": \"$REF\",
                        \"createdAt\": \"$CREATED_AT\",
                        \"url\": \"$LINK\",
                        \"description\": \"$DESCRIPTION\"
                      }
                    }")
      
                  echo "Port API Response Code: $RESPONSE"
                fi
              done <<< "$DEPLOYMENTS"
              ((PAGE++))
            done
          done


      - name: Inform entity upsert failure
        if: steps.upsert_deployment_entity.outcome == 'failure'
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.DORA_PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.DORA_PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(inputs.port_payload).runId}}
          logMessage: "Failed to report the created entities back to Port ..."

      - name: Inform completion of workflow upsert
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.DORA_PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.DORA_PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(inputs.port_payload).runId}}
          logMessage: "Fetching of historical deployment was successful ✅"
