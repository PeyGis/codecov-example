name: DORA Pull Request Strategy

on:
  workflow_dispatch:
    inputs:
      your_deployment_integration:
        description: 'Deployment Integration'
        required: true
      your_deployment_type:
        description: 'Deployment Type'
        required: true
      deploy_branch:
        description: 'Deployment Branch'
        required: true
        type: string
      pr_rules_fields:
        description: 'PR Rules Fields'
        required: false
      pr_rules_status_op:
        description: 'Status Operator'
        required: false
        type: string
      pr_rules_status_options:
        description: 'Status Options'
        required: false
        type: string
      pr_rules_author:
        description: 'PR Authors'
        required: false
        type: string
      pr_rules_author_op:
        description: 'Author Operator'
        required: false
        type: string
      pr_rules_label_op:
        description: 'Label Operator'
        required: false
        type: string
      pr_rules_label_str:
        description: 'Label String'
        required: false
        type: string
      pr_rules_repo_op:
        description: 'Repository Operator'
        required: false
        type: string
      pr_rules_repo_str:
        description: 'Repository String'
        required: false
        type: string
      pr_rules_title_op:
        description: 'Title Operator'
        required: false
        type: string
      pr_rules_title_str:
        description: 'Title String'
        required: false
        type: string
      port_context:
        required: true
        description: includes blueprint, run ID, and entity identifier from Port.

jobs:
  trigger-incident:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Inform execution of request to trigger incident
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(inputs.port_context).run_id}}
          logMessage: "About to run pull request DORA strategy..."

      - name: Fetch repositories
        if: ${{ !contains(inputs.pr_rules_fields, 'Repository') }}
        run: |
          API_URL="https://api.github.com"
          HEADERS="-H 'Accept: application/vnd.github.v3+json' -H 'Authorization: Bearer ${{ secrets.DORA_GITHUB_TOKEN }}'"
          PAGE=1
          REPOS=()
          while : ; do
            REPO_BATCH=$(curl -s -X GET "$API_URL/user/repos?per_page=100&page=$PAGE" $HEADERS | jq -r '.[].full_name')
            [ -z "$REPO_BATCH" ] && break
            REPOS+=($REPO_BATCH)
            ((PAGE++))
          done
          echo "REPOS=$(printf "%s," "${REPOS[@]}")" >> $GITHUB_ENV

      - name: Fetch PR data
        run: |
          API_URL="https://api.github.com"
          HEADERS="-H 'Accept: application/vnd.github.v3+json' -H 'Authorization: Bearer ${{ secrets.DORA_GITHUB_TOKEN }}'"
          QUERY_PARAMS=""
          CURRENT_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          THREE_MONTHS_AGO=$(date -u -d '-3 months' +%Y-%m-%dT%H:%M:%SZ)
          
          if [ "${{ inputs.pr_rules_status_options }}" != "" ]; then
            if [ "${{ inputs.pr_rules_status_op }}" == "is" ]; then
              QUERY_PARAMS+="&state=${{ inputs.pr_rules_status_options }}"
            elif [ "${{ inputs.pr_rules_status_op }}" == "isn't" ]; then
              QUERY_PARAMS+="&state!=${{ inputs.pr_rules_status_options }}"
            fi
          fi

          PR_RESULTS=()
          REPOS_LIST="${{ env.REPOS }}"
          IFS=',' read -r -a REPOS <<< "$REPOS_LIST"
          for REPO in "${REPOS[@]}"; do
            PR_PAGE=1
            while : ; do
              PRS=$(curl -s -X GET "$API_URL/repos/$REPO/pulls?per_page=100&page=$PR_PAGE$QUERY_PARAMS" $HEADERS | jq -c '.[]')
              [ -z "$PRS" ] && break
              echo "$PRS" | while read -r PR; do
                PR_CREATED_AT=$(echo "$PR" | jq -r '.created_at')
                if [[ "$PR_CREATED_AT" < "$THREE_MONTHS_AGO" ]]; then
                  break 2
                fi
                PR_TITLE=$(echo "$PR" | jq -r '.title')
                PR_LABELS=$(echo "$PR" | jq -r '.labels[].name' | tr '\n' ',')
                PR_AUTHOR=$(echo "$PR" | jq -r '.user.login')
                
                MATCH=true
                if [ "${{ inputs.pr_rules_label_op }}" != "" ] && [ "${{ inputs.pr_rules_label_str }}" != "" ]; then
                  case "${{ inputs.pr_rules_label_op }}" in
                    "contains") [[ "$PR_LABELS" == *"${{ inputs.pr_rules_label_str }}"* ]] || MATCH=false;;
                    "doesn't contain") [[ "$PR_LABELS" != *"${{ inputs.pr_rules_label_str }}"* ]] || MATCH=false;;
                    "starts with") [[ "$PR_LABELS" == "${{ inputs.pr_rules_label_str }}"* ]] || MATCH=false;;
                    "doesn't start with") [[ "$PR_LABELS" != "${{ inputs.pr_rules_label_str }}"* ]] || MATCH=false;;
                    "equals") [[ "$PR_LABELS" == "${{ inputs.pr_rules_label_str }}" ]] || MATCH=false;;
                  esac
                fi
                
                if $MATCH; then
                  PR_RESULTS+=("$PR")
                fi
              done
              ((PR_PAGE++))
            done
          done
