name: Update Port with YouTube Playlist Data

on:
  workflow_dispatch:
    inputs:
      playlistid:
        description: 'ID of the YouTube playlist'
        required: true
      port_context:
        description: 'Port context payload'
        required: true

jobs:
  prepare_token:
    runs-on: ubuntu-latest
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
    steps:
      - name: Create Data Directory
        run: mkdir -p data

      - name: Generate Access Token
        run: |
          set -e
          PORT_CLIENT_ID=$(echo "$PORT_CLIENT_ID" | xargs)
          PORT_CLIENT_SECRET=$(echo "$PORT_CLIENT_SECRET" | xargs)
          
          response=$(curl -s -X POST "https://api.getport.io/v1/auth/access_token" \
            -H "Content-Type: application/json" \
            -d "{\"clientId\": \"$PORT_CLIENT_ID\", \"clientSecret\": \"$PORT_CLIENT_SECRET\"}")
          
          ACCESS_TOKEN=$(echo "$response" | jq -r '.accessToken')
          echo "Bearer $ACCESS_TOKEN" > data/token.txt

      - name: Upload Token Artifact
        uses: actions/upload-artifact@v4
        with:
          name: port-token
          path: data/token.txt
          retention-days: 1

  fetch_playlist_metadata:
    needs: prepare_token
    runs-on: ubuntu-latest
    env:
      YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
      PLAYLIST_ID: ${{ inputs.playlistid }}
    outputs:
      playlist_id: ${{ steps.fetch_metadata.outputs.PLAYLIST_ID }}
      playlist_data: ${{ steps.fetch_metadata.outputs.PLAYLIST_DATA }}
    steps:
      - name: Download Token Artifact
        uses: actions/download-artifact@v4
        with:
          name: port-token
          path: data

      - name: Load Token
        run: |
          TOKEN=$(cat data/token.txt)
          echo "ACCESS_TOKEN=$TOKEN" >> $GITHUB_ENV

      - name: Send Start Logs to Port
        id: start_log
        run: |
          set -e
          PORT_RUN_ID=$(echo '${{ inputs.port_context }}' | jq -r '.runId')
          curl -L "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
            -H "Content-Type: application/json" \
            -H "Authorization: $ACCESS_TOKEN" \
            -d '{
              "message": "Metadata fetch of playlist has commenced PLAYLIST_ID - '$PLAYLIST_ID'",
              "statusLabel": "Fetching Playlist"
            }'

      - name: Fetch YouTube Playlist Metadata
        id: fetch_metadata
        run: |
          playlist_response=$(curl -s "https://www.googleapis.com/youtube/v3/playlists?part=snippet,contentDetails,status&id=${PLAYLIST_ID}&key=${YOUTUBE_API_KEY}")
          playlist_id=$(echo $playlist_response | jq -r '.items[0].id')
          
          if [ -z "$playlist_id" ]; then
            echo "Failed to fetch playlist details. Exiting."
            exit 1
          fi
          playlist_data=$(echo $playlist_response | jq -c '.items[0] | {
            identifier: .id,
            title: .snippet.title,
            properties: {
              description: .snippet.description,
              thumbnailUrl: .snippet.thumbnails.default.url,
              videoCount: .contentDetails.itemCount,
              created_at: .snippet.publishedAt
            }
          }')
          echo "PLAYLIST_ID=$playlist_id" >> $GITHUB_OUTPUT
          echo "PLAYLIST_DATA=$playlist_data" >> $GITHUB_OUTPUT

      - name: Send Completion Logs to Port
        if: success()
        run: |
          PORT_RUN_ID=$(echo '${{ inputs.port_context }}' | jq -r '.runId')
          curl -L "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
            -H "Content-Type: application/json" \
            -H "Authorization: $ACCESS_TOKEN" \
            -d '{
              "message": "Successfully fetched playlist metadata PLAYLIST_ID - '$PLAYLIST_ID'",
              "statusLabel": "Playlist Fetched"
            }'

  push_playlist_to_port:
    needs: fetch_playlist_metadata
    runs-on: ubuntu-latest
    env:
      PLAYLIST_ID: ${{ inputs.playlistid }}
    steps:
      - name: Download Token Artifact
        uses: actions/download-artifact@v4
        with:
          name: port-token
          path: data

      - name: Load Token
        run: |
          TOKEN=$(cat data/token.txt)
          echo "ACCESS_TOKEN=$TOKEN" >> $GITHUB_ENV

      - name: Send Start Logs to Port
        run: |
          PORT_RUN_ID=$(echo '${{ inputs.port_context }}' | jq -r '.runId')
          curl -L "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
            -H "Content-Type: application/json" \
            -H "Authorization: $ACCESS_TOKEN" \
            -d '{
              "message": "ingesting playlist data to Port has commenced PLAYLIST_ID - '$PLAYLIST_ID'",
              "statusLabel": "ingesting Playlist to Port"
            }'

      - name: Push Playlist Data to Port
        run: |
          playlist_entity='${{ needs.fetch_playlist_metadata.outputs.playlist_data }}'
          
          response=$(curl -s -w "%{http_code}" -X POST "https://api.getport.io/v1/blueprints/playlist/entities?upsert=true" \
            -H "Authorization: $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$playlist_entity")
          
          if [[ "${response: -3}" != "200" && "${response: -3}" != "201" ]]; then
            echo "Failed to push playlist to Port. Response: $response"
            exit 1
          fi

      - name: Send Completion Logs to Port
        if: success()
        run: |
          PORT_RUN_ID=$(echo '${{ inputs.port_context }}' | jq -r '.runId')
          curl -L "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
            -H "Content-Type: application/json" \
            -H "Authorization: $ACCESS_TOKEN" \
            -d '{
              "message": "Successfully ingested playlist data to Port PLAYLIST_ID - '$PLAYLIST_ID'",
              "statusLabel": "Playlist ingested"
            }'

  fetch_and_ingest_videos:
    needs: push_playlist_to_port
    runs-on: ubuntu-latest
    env:
      YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
      PLAYLIST_ID: ${{ inputs.playlistid }}
    steps:
      - name: Download Token Artifact
        uses: actions/download-artifact@v4
        with:
          name: port-token
          path: data

      - name: Load Token
        run: |
          TOKEN=$(cat data/token.txt)
          echo "ACCESS_TOKEN=$TOKEN" >> $GITHUB_ENV

      - name: Send Start Logs to Port
        run: |
          PORT_RUN_ID=$(echo '${{ inputs.port_context }}' | jq -r '.runId')
          curl -L "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
            -H "Content-Type: application/json" \
            -H "Authorization: $ACCESS_TOKEN" \
            -d '{
              "message": "Extraction and ingesting of video data from YouTube has commenced PLAYLIST_ID - '$PLAYLIST_ID'",
              "statusLabel": "Fetching and ingesting Videos"
            }'

      - name: Collect Video Data and Ingest
        id: collect_videos
        run: |
          # Process playlist videos
          next_page_token=""
          while :; do
            echo "Fetching playlist page${next_page_token:+ with token $next_page_token}..."
            
            url="https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&playlistId=${PLAYLIST_ID}&key=${YOUTUBE_API_KEY}${next_page_token:+&pageToken=$next_page_token}"
            response=$(curl -s "$url")
            
            # Check for API errors
            if [ "$(echo "$response" | jq -r '.error.code // empty')" != "" ]; then
              echo "YouTube API Error: $(echo "$response" | jq -r '.error.message')"
              exit 1
            fi
            
            next_page_token=$(echo "$response" | jq -r '.nextPageToken // empty')
            video_ids=$(echo "$response" | jq -r '.items[].snippet.resourceId.videoId')
            
            for video_id in $video_ids; do
              echo "Processing video ID: $video_id"
              
              video_details=$(curl -s "https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&id=$video_id&key=${YOUTUBE_API_KEY}")
              
              # Extract video details
              video_title=$(echo "$video_details" | jq -r '.items[0].snippet.title')
              video_description=$(echo "$video_details" | jq -r '.items[0].snippet.description')
              video_thumbnail=$(echo "$video_details" | jq -r '.items[0].snippet.thumbnails.default.url')
              video_duration=$(echo "$video_details" | jq -r '.items[0].contentDetails.duration')
              video_view_count=$(echo "$video_details" | jq -r '.items[0].statistics.viewCount // "0"')
              video_like_count=$(echo "$video_details" | jq -r '.items[0].statistics.likeCount // "0"')
              video_comment_count=$(echo "$video_details" | jq -r '.items[0].statistics.commentCount // "0"')
              
              # Create video entity in Port
              video_entity=$(jq -n \
                --arg id "$video_id" \
                --arg title "$video_title" \
                --arg description "$video_description" \
                --arg thumbnailUrl "$video_thumbnail" \
                --arg duration "$video_duration" \
                --arg viewCount "$video_view_count" \
                --arg likeCount "$video_like_count" \
                --arg commentCount "$video_comment_count" \
                --arg playlist_id "$PLAYLIST_ID" \
                '{
                  identifier: $id,
                  title: $title,
                  properties: {       
                    description: $description,
                    thumbnailUrl: $thumbnailUrl,
                    duration: $duration,
                    viewCount: ($viewCount | tonumber),
                    likeCount: ($likeCount | tonumber),
                    commentCount: ($commentCount | tonumber)
                  },
                  relations: {
                    belongs_to_playlist: $playlist_id
                  }
                }')
              
              response=$(curl --http1.1 -s -w "\n%{http_code}" -X POST "https://api.getport.io/v1/blueprints/video/entities?upsert=true" \
                -H "Authorization: $ACCESS_TOKEN" \
                -H "Content-Type: application/json" \
                -d "$video_entity")
              
              http_code=$(echo "$response" | tail -n1)
              body=$(echo "$response" | sed '$d')
              
              if [[ ! "$http_code" =~ ^2[0-9][0-9]$ ]]; then
                echo "Failed to push video to Port. HTTP code: $http_code"
                echo "Response Body: $body"
                continue
              fi
              
              echo "Successfully processed video: $video_id"
            done
            
            if [ -z "$next_page_token" ]; then
              echo "No more pages to process"
              break
            fi
          done

      - name: Send Completion Logs to Port
        if: success()
        run: |
          PORT_RUN_ID=$(echo '${{ inputs.port_context }}' | jq -r '.runId')
          curl -L "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
            -H "Content-Type: application/json" \
            -H "Authorization: $ACCESS_TOKEN" \
            -d '{
              "message": "Successfully fetched and ingested all videos PLAYLIST_ID - '$PLAYLIST_ID'",
              "statusLabel": "Videos Fetched and ingested"
            }'

      - name: Handle Job Completion
        if: always()
        run: |
          PORT_RUN_ID=$(echo '${{ inputs.port_context }}' | jq -r '.runId')
          if [[ "$?" == "0" ]]; then
            STATUS_LABEL="Success"
            MESSAGE="Successfully ingested Youtube data to Port!"
          else
            STATUS_LABEL="Failed"
            MESSAGE="Failed to complete video processing"
          fi
          
          curl -L "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
            -H "Content-Type: application/json" \
            -H "Authorization: $ACCESS_TOKEN" \
            -d "{
              \"message\": \"$MESSAGE\",
              \"statusLabel\": \"$STATUS_LABEL\"
            }"
