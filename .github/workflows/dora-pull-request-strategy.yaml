name: Fetch and Send PR Data

on:
  workflow_dispatch:
    inputs:
      config:
        description: 'JSON input configuration for fetching PRs'
        required: true
        type: string
      port_payload:
        required: true
        description: Port's payload, including details for who triggered the action and general context (blueprint, run id, etc...)

jobs:
  fetch-prs:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Inform execution of request to fetch historical pull request data
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.DORA_PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.DORA_PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(inputs.port_payload).runId}}
          logMessage: "About to fetch pull request data from GitHub..."

      - name: Parse Input Configuration
        id: parse_config
        run: |
          echo '${{ inputs.config }}' > config.json
          CONFIG_JSON=$(jq -c . config.json)  # Proper JSON parsing
          echo "CONFIG_JSON=$CONFIG_JSON" >> "$GITHUB_ENV"


      - name: Extract Filters from JSON
        id: extract_filters
        run: |
          CONFIG_JSON=$(echo '${{ env.CONFIG_JSON }}' | jq -c .)

          # Extract individual fields
          DEPLOY_BRANCH=$(echo "$CONFIG_JSON" | jq -r '.deploy_branch // "main"')
          PR_RULES_FIELDS=$(echo "$CONFIG_JSON" | jq -c '.pr_rules_fields // []')
          PR_STATUS_OP=$(echo "$CONFIG_JSON" | jq -r '.pr_rules_status_op // empty')
          PR_STATUS_VALUE=$(echo "$CONFIG_JSON" | jq -r '.pr_rules_status_options // empty')
          PR_AUTHOR_OP=$(echo "$CONFIG_JSON" | jq -r '.pr_rules_author_op // empty')
          PR_AUTHORS=$(echo "$CONFIG_JSON" | jq -c '.pr_rules_author // []')
          PR_LABEL_OP=$(echo "$CONFIG_JSON" | jq -r '.pr_rules_label_op // empty')
          PR_LABEL_VALUE=$(echo "$CONFIG_JSON" | jq -r '.pr_rules_label_str // empty')
          PR_REPO_OP=$(echo "$CONFIG_JSON" | jq -r '.pr_rules_repo_op // empty')
          PR_REPO_VALUE=$(echo "$CONFIG_JSON" | jq -r '.pr_rules_repo_str // empty')

          echo "DEPLOY_BRANCH=$DEPLOY_BRANCH" >> "$GITHUB_ENV"
          echo "PR_RULES_FIELDS=$PR_RULES_FIELDS" >> "$GITHUB_ENV"
          echo "PR_STATUS_OP=$PR_STATUS_OP" >> "$GITHUB_ENV"
          echo "PR_STATUS_VALUE=$PR_STATUS_VALUE" >> "$GITHUB_ENV"
          echo "PR_AUTHOR_OP=$PR_AUTHOR_OP" >> "$GITHUB_ENV"
          echo "PR_AUTHORS=$PR_AUTHORS" >> "$GITHUB_ENV"
          echo "PR_LABEL_OP=$PR_LABEL_OP" >> "$GITHUB_ENV"
          echo "PR_LABEL_VALUE=$PR_LABEL_VALUE" >> "$GITHUB_ENV"
          echo "PR_REPO_OP=$PR_REPO_OP" >> "$GITHUB_ENV"
          echo "PR_REPO_VALUE=$PR_REPO_VALUE" >> "$GITHUB_ENV"

      - name: Fetch All Repositories (if no repo filter applied)
        if: ${{ !contains(env.PR_RULES_FIELDS, 'Repository') }}
        id: fetch_repos
        run: |
          GH_TOKEN=${{ secrets.DORA_GITHUB_TOKEN }}
          REPOS=()
          PAGE=1

          while :; do
            RESPONSE=$(curl -s -H "Authorization: token $GH_TOKEN" \
              "https://api.github.com/user/repos?per_page=100&page=$PAGE")

            NEW_REPOS=$(echo "$RESPONSE" | jq -r '.[].full_name')
            if [[ -z "$NEW_REPOS" ]]; then break; fi

            REPOS+=($NEW_REPOS)
            ((PAGE++))
          done

          echo "REPO_LIST=${REPOS[*]}" >> "$GITHUB_ENV"

      - name: Fetch PR Data
        run: |
          GH_TOKEN=${{ secrets.DORA_GITHUB_TOKEN }}
          REPOS=(${{ env.REPO_LIST }})
          THREE_MONTHS_AGO=$(date -d '3 months ago' --utc +%Y-%m-%dT%H:%M:%SZ)
          FILTERED_PRS=""
          BLUEPRINT_ID="githubPullRequest"

          for REPO in "${REPOS[@]}"; do
            echo "Processing repo: $REPO"
            PAGE=1

            while true; do
              RESPONSE=$(curl -s -H "Authorization: token $GH_TOKEN" \
                "https://api.github.com/repos/$REPO/pulls?state=closed&per_page=100&page=$PAGE")

              # Convert JSON response into an array (to avoid broken pipe issues)
              PR_LIST=()
              while IFS= read -r PR; do
                PR_LIST+=("$PR")
              done < <(echo "$RESPONSE" | jq -c '.[]')

              # Stop if no more PRs are found
              if [[ "${#PR_LIST[@]}" -eq 0 ]]; then
                #echo "No more PRs found for $REPO. Moving to the next repo..."
                break
              fi

              for PR in "${PR_LIST[@]}"; do
                #echo "Processing PR..."
                PR_CREATED_AT=$(echo "$PR" | jq -r '.created_at')
                #echo "Created at: $PR_CREATED_AT"

                if [[ "$PR_CREATED_AT" < "$THREE_MONTHS_AGO" ]]; then
                  #echo "PR is older than 3 months. Stopping further fetch for $REPO."
                  break 2  # Exit both loops
                fi

                PR_MATCHES_FILTERS=true

                # Apply Filters
                PR_STATE=$(echo "$PR" | jq -r '.state')
                if [[ "$PR_STATUS_OP" == "is" && "$PR_STATE" != "$PR_STATUS_VALUE" ]]; then
                  PR_MATCHES_FILTERS=false
                elif [[ "$PR_STATUS_OP" == "isn't" && "$PR_STATE" == "$PR_STATUS_VALUE" ]]; then
                  PR_MATCHES_FILTERS=false
                fi

                PR_LABELS=$(echo "$PR" | jq -r '[.labels[].name] | join(",")')
                if [[ "$PR_LABEL_OP" == "contains" && "$PR_LABELS" != *"$PR_LABEL_VALUE"* ]]; then
                  PR_MATCHES_FILTERS=false
                elif [[ "$PR_LABEL_OP" == "doesn't contain" && "$PR_LABELS" == *"$PR_LABEL_VALUE"* ]]; then
                  PR_MATCHES_FILTERS=false
                fi

                PR_AUTHOR=$(echo "$PR" | jq -r '.user.login')
                if [[ "$PR_AUTHOR_OP" == "is" && "$PR_AUTHOR" != "$PR_AUTHORS" ]]; then
                  PR_MATCHES_FILTERS=false
                elif [[ "$PR_AUTHOR_OP" == "isn't" && "$PR_AUTHOR" == "$PR_AUTHORS" ]]; then
                  PR_MATCHES_FILTERS=false
                fi

                # if $PR_MATCHES_FILTERS; then
                #   FILTERED_PRS+="$PR"$'\n'
                # fi
                if $PR_MATCHES_FILTERS; then
                  PR_ID=$(echo "$PR" | jq -r '.id')
                  PR_TITLE=$(echo "$PR" | jq -r '.title')
                  PR_NUMBER=$(echo "$PR" | jq -r '.number')
                  PR_LINK=$(echo "$PR" | jq -r '.html_url')
                  PR_BRANCH=$(echo "$PR" | jq -r '.head.ref')
                  PR_CREATED_AT=$(echo "$PR" | jq -r '.created_at')
                  PR_UPDATED_AT=$(echo "$PR" | jq -r '.updated_at')
                  PR_CLOSED_AT=$(echo "$PR" | jq -r '.closed_at')
                  PR_MERGED_AT=$(echo "$PR" | jq -r '.merged_at')
                  PR_STATUS=$(echo "$PR" | jq -r '.state')
      
                  REPO_NAME=$(echo "$REPO" | awk -F'/' '{print $2}')
                  REPO_IDENTIFIER=$(echo "$REPO" | tr '/' '-')
      
                  JSON_PAYLOAD=$(jq -n \
                    --arg identifier "$REPO_IDENTIFIER-pr-$PR_NUMBER" \
                    --arg title "$PR_TITLE" \
                    --arg status "$PR_STATUS" \
                    --arg closedAt "$PR_CLOSED_AT" \
                    --arg updatedAt "$PR_UPDATED_AT" \
                    --arg mergedAt "$PR_MERGED_AT" \
                    --arg createdAt "$PR_CREATED_AT" \
                    --arg link "$PR_LINK" \
                    --arg prNumber "$PR_NUMBER" \
                    --arg branch "$PR_BRANCH" \
                    --arg repoIdentifier "$REPO_IDENTIFIER" \
                    '{
                      identifier: $identifier,
                      title: $title,
                      properties: {
                        status: $status,
                        closedAt: $closedAt,
                        updatedAt: $updatedAt,
                        mergedAt: $mergedAt,
                        createdAt: $createdAt,
                        link: $link,
                        prNumber: ($prNumber | tonumber),
                        branch: $branch
                      },
                      relations: {
                        repository: $repoIdentifier
                      }
                    }')
      
                  echo "Sending PR $PR_NUMBER from $REPO to Port API..."
                  curl --location --request POST "https://api.getport.io/v1/blueprints/${BLUEPRINT_ID}/entities?upsert=true&merge=true&run_id=${{fromJson(inputs.port_payload).runId}}" \
                    --header "Authorization: Bearer $PORT_ACCESS_TOKEN" \
                    --header "Content-Type: application/json" \
                    --data-raw "$JSON_PAYLOAD"
      
                  echo "PR $PR_NUMBER successfully sent!"
                fi
              done

              ((PAGE++))
            done
          done

          # if [[ -z "$FILTERED_PRS" ]]; then
          #   FINAL_PR_DATA="[]"
          # else
          #   FINAL_PR_DATA=$(echo "$FILTERED_PRS" | jq -s -c .)
          # fi
          
          #echo "FINAL_PR_DATA=$FINAL_PR_DATA" >> "$GITHUB_ENV"
