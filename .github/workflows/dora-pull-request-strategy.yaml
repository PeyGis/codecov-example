name: Fetch and Send PR Data

on:
  workflow_dispatch:
    inputs:
      config:
        description: 'JSON input configuration for fetching PRs'
        required: true
        type: string
      port_payload:
        required: true
        description: Port's payload, including details for who triggered the action and general context (blueprint, run id, etc...)

jobs:
  fetch-prs:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Inform execution of request to fetch historical pull request data
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.DORA_PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.DORA_PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(inputs.port_payload).runId}}
          logMessage: "About to fetch pull request data from GitHub..."

      - name: Fetch Port Access Token
        id: fetch_port_token
        run: |
          PORT_ACCESS_TOKEN=$(curl -s -L 'https://api.getport.io/v1/auth/access_token' \
            -H 'Content-Type: application/json' \
            -H 'Accept: application/json' \
            -d '{
              "clientId": "${{ secrets.DORA_PORT_CLIENT_ID }}",
              "clientSecret": "${{ secrets.DORA_PORT_CLIENT_SECRET }}"
            }' | jq -r '.accessToken')

          echo "PORT_ACCESS_TOKEN=$PORT_ACCESS_TOKEN" >> "$GITHUB_ENV"
          
      # - name: Parse Input Configuration
      #   id: parse_config
      #   run: |
      #     echo '${{ inputs.config }}' > config.json
      #     CONFIG_JSON=$(jq -c . config.json)  # Proper JSON parsing
      #     echo "CONFIG_JSON=$CONFIG_JSON" >> "$GITHUB_ENV"
          
      - name: Parse Input Configuration
        id: parse_config
        run: |
          echo '${{ inputs.config }}' | jq -cR 'fromjson?' > config.json
          CONFIG_JSON=$(cat config.json)
          echo "CONFIG_JSON=$CONFIG_JSON" >> "$GITHUB_ENV"

      
            

      - name: Extract Filters from JSON
        id: extract_filters
        run: |
          CONFIG_JSON=$(echo '${{ env.CONFIG_JSON }}' | jq -c .)

          # Extract individual fields
          DEPLOY_BRANCH=$(echo "$CONFIG_JSON" | jq -r '.deploy_branch // "main"')
          PR_RULES_FIELDS=$(echo "$CONFIG_JSON" | jq -c '.pr_rules_fields // []')
          PR_STATUS_OP=$(echo "$CONFIG_JSON" | jq -r '.pr_rules_status_op // empty')
          PR_STATUS_VALUE=$(echo "$CONFIG_JSON" | jq -r '.pr_rules_status_options // empty')
          PR_AUTHOR_OP=$(echo "$CONFIG_JSON" | jq -r '.pr_rules_author_op // empty')
          PR_AUTHORS=$(echo "$CONFIG_JSON" | jq -r 'if .pr_rules_author then .pr_rules_author | map(.identifier) | join(" ") else "" end')
          PR_LABEL_OP=$(echo "$CONFIG_JSON" | jq -r '.pr_rules_label_op // empty')
          PR_LABEL_VALUE=$(echo "$CONFIG_JSON" | jq -r '.pr_rules_label_str // empty')
          PR_TITLE_OP=$(echo "$CONFIG_JSON" | jq -r '.pr_rules_title_op // empty')
          PR_TITLE_VALUE=$(echo "$CONFIG_JSON" | jq -r '.pr_rules_title_str // empty')
          PR_REPO_OP=$(echo "$CONFIG_JSON" | jq -r '.pr_rules_repo_op // empty')
          PR_REPO_VALUE=$(echo "$CONFIG_JSON" | jq -r 'if .pr_rules_repository then .pr_rules_repository | map(.identifier) | join(" ") else "" end')

          echo "DEPLOY_BRANCH=$DEPLOY_BRANCH" >> "$GITHUB_ENV"
          echo "PR_RULES_FIELDS=$PR_RULES_FIELDS" >> "$GITHUB_ENV"
          echo "PR_STATUS_OP=$PR_STATUS_OP" >> "$GITHUB_ENV"
          echo "PR_STATUS_VALUE=$PR_STATUS_VALUE" >> "$GITHUB_ENV"
          echo "PR_AUTHOR_OP=$PR_AUTHOR_OP" >> "$GITHUB_ENV"
          echo "PR_AUTHORS=$PR_AUTHORS" >> "$GITHUB_ENV"
          echo "PR_LABEL_OP=$PR_LABEL_OP" >> "$GITHUB_ENV"
          echo "PR_LABEL_VALUE=$PR_LABEL_VALUE" >> "$GITHUB_ENV"
          echo "PR_TITLE_OP=$PR_TITLE_OP" >> "$GITHUB_ENV"
          echo "PR_TITLE_VALUE=$PR_TITLE_VALUE" >> "$GITHUB_ENV"
          echo "PR_REPO_OP=$PR_REPO_OP" >> "$GITHUB_ENV"
          echo "PR_REPO_VALUE=$PR_REPO_VALUE" >> "$GITHUB_ENV"

      - name: Fetch All Repositories (if no repo filter applied)
        if: ${{ !contains(env.PR_RULES_FIELDS, 'Repository') }}
        id: fetch_repos
        run: |
          GH_TOKEN=${{ secrets.DORA_GITHUB_TOKEN }}
          REPOS=()
          PAGE=1
          ORG=${{ github.repository_owner }}

          while :; do
            RESPONSE=$(curl -s -H "Authorization: token $GH_TOKEN" \
              "https://api.github.com/users/$ORG/repos?per_page=100&page=$PAGE")

            NEW_REPOS=$(echo "$RESPONSE" | jq -r '.[].full_name')
            if [[ -z "$NEW_REPOS" ]]; then break; fi

            REPOS+=($NEW_REPOS)
            ((PAGE++))
          done

          echo "REPO_LIST=${REPOS[*]}" >> "$GITHUB_ENV"

      - name: Set Single Repo if Repository Filter Exists
        if: ${{ contains(env.PR_RULES_FIELDS, 'Repository') }}
        run: |
          echo "REPO_LIST=${{ env.PR_REPO_VALUE }}" >> "$GITHUB_ENV"
          
      - name: Fetch PR Data
        id: upsert_pr_entity
        run: |
          GH_TOKEN=${{ secrets.DORA_GITHUB_TOKEN }}
          REPOS=(${{ env.REPO_LIST }})
          THREE_MONTHS_AGO=$(date -d '3 months ago' --utc +%Y-%m-%dT%H:%M:%SZ)
          FILTERED_PRS=""
          BLUEPRINT_ID="githubPullRequest"

          format_date() {
            if [[ -n "$1" && "$1" != "null" ]]; then
              date -u -d "$1" +"%Y-%m-%dT%H:%M:%S.%3NZ"
            else
              echo "null"
            fi
          }
          
          for REPO in "${REPOS[@]}"; do
            echo "Processing repo: $REPO"
            PAGE=1
      
            while true; do

              PR_STATE_FILTER="all" # Default to 'all' if no status filter is provided
              
              if [[ "$PR_STATUS_OP" == "is" ]]; then
                PR_STATE_FILTER="$PR_STATUS_VALUE"
              elif [[ "$PR_STATUS_OP" == "is not" ]]; then
                PR_STATE_FILTER=$([[ "$PR_STATUS_VALUE" == "closed" ]] && echo "open" || echo "closed")
              fi
              
              RESPONSE=$(curl -s -H "Authorization: token $GH_TOKEN" \
                "https://api.github.com/repos/$REPO/pulls?state=$PR_STATE_FILTER&per_page=100&page=$PAGE")

              # Convert JSON response into an array (to avoid broken pipe issues)
              PR_LIST=()
              while IFS= read -r PR; do
                PR_LIST+=("$PR")
              done < <(echo "$RESPONSE" | jq -c '.[]')

              # Stop if no more PRs are found
              if [[ "${#PR_LIST[@]}" -eq 0 ]]; then
                echo "No more PRs found for $REPO. Moving to the next repo..."
                break
              fi

              for PR in "${PR_LIST[@]}"; do
                echo "Processing PR ..."
                PR_CREATED_AT=$(echo "$PR" | jq -r '.created_at')
                echo "Created at: $PR_CREATED_AT"

                if [[ "$PR_CREATED_AT" < "$THREE_MONTHS_AGO" ]]; then
                  #echo "PR is older than 3 months. Stopping further fetch for $REPO."
                  break 2  # Exit both loops
                fi

                PR_MATCHES_FILTERS=true

                # Apply Filters
                # PR_STATE=$(echo "$PR" | jq -r '.state')
                # if [[ "$PR_STATUS_OP" == "is" && "$PR_STATE" != "$PR_STATUS_VALUE" ]]; then
                #   PR_MATCHES_FILTERS=false
                # elif [[ "$PR_STATUS_OP" == "isn't" && "$PR_STATE" == "$PR_STATUS_VALUE" ]]; then
                #   PR_MATCHES_FILTERS=false
                # fi

                PR_LABELS=($(echo "$PR" | jq -r '.labels[].name'))  # Extract labels as an array
                LABEL_MATCH=false
                
                for LABEL in "${PR_LABELS[@]}"; do
                  case "$PR_LABEL_OP" in
                    "equals") [[ "$LABEL" == "$PR_LABEL_VALUE" ]] && LABEL_MATCH=true ;;
                    "contains") [[ "$LABEL" == *"$PR_LABEL_VALUE"* ]] && LABEL_MATCH=true ;;
                    "starts with") [[ "$LABEL" == "$PR_LABEL_VALUE"* ]] && LABEL_MATCH=true ;;
                    "does not contain") [[ "$LABEL" == *"$PR_LABEL_VALUE"* ]] && LABEL_MATCH=false || LABEL_MATCH=true ;;
                    "does not start with") [[ "$LABEL" == "$PR_LABEL_VALUE"* ]] && LABEL_MATCH=false || LABEL_MATCH=true ;;
                  esac
                  [[ "$LABEL_MATCH" == true ]] && break  # Exit early if a match is found
                done
                
                # Apply final decision
                if [[ "$PR_LABEL_OP" =~ ^(equals|contains|starts with)$ && "$LABEL_MATCH" == false ]]; then
                  PR_MATCHES_FILTERS=false
                elif [[ "$PR_LABEL_OP" =~ ^(does not contain|does not start with)$ && "$LABEL_MATCH" == true ]]; then
                  PR_MATCHES_FILTERS=false
                fi


                PR_AUTHOR=$(echo "$PR" | jq -r '.user.login')  # Extract actual PR author
                AUTHOR_MATCH=false
                
                for AUTHOR in $PR_AUTHORS; do
                  echo "$AUTHOR"
                  case "$PR_AUTHOR_OP" in
                    "is") [[ "$PR_AUTHOR" == "$AUTHOR" ]] && AUTHOR_MATCH=true && break ;;
                    "is not") [[ "$PR_AUTHOR" == "$AUTHOR" ]] && AUTHOR_MATCH=false ;;
                  esac
                done
                
                # Apply final decision
                if [[ "$PR_AUTHOR_OP" == "is" && "$AUTHOR_MATCH" == false ]]; then
                  PR_MATCHES_FILTERS=false
                elif [[ "$PR_AUTHOR_OP" == "is not" && "$AUTHOR_MATCH" == true ]]; then
                  PR_MATCHES_FILTERS=false
                fi

                PR_TITLE=$(echo "$PR" | jq -r '.title')
                
                case "$PR_TITLE_OP" in
                  "equals") [[ "$PR_TITLE" != "$PR_TITLE_VALUE" ]] && PR_MATCHES_FILTERS=false ;;
                  "contains") [[ "$PR_TITLE" != *"$PR_TITLE_VALUE"* ]] && PR_MATCHES_FILTERS=false ;;
                  "does not contain") [[ "$PR_TITLE" == *"$PR_TITLE_VALUE"* ]] && PR_MATCHES_FILTERS=false ;;
                  "starts with") [[ "$PR_TITLE" != "$PR_TITLE_VALUE"* ]] && PR_MATCHES_FILTERS=false ;;
                  "does not start with") [[ "$PR_TITLE" == "$PR_TITLE_VALUE"* ]] && PR_MATCHES_FILTERS=false ;;
                esac


                if $PR_MATCHES_FILTERS; then
                  PR_IDENTIFIER=$(echo "$PR" | jq -r '.id')
                  PR_TITLE=$(echo "$PR" | jq -r '.title')
                  PR_NUMBER=$(echo "$PR" | jq -r '.number')
                  PR_LINK=$(echo "$PR" | jq -r '.html_url')
                  PR_BRANCH=$(echo "$PR" | jq -r '.head.ref')
                  PR_CREATED_AT=$(echo "$PR" | jq -r '.created_at')
                  PR_UPDATED_AT=$(echo "$PR" | jq -r '.updated_at')
                  PR_CLOSED_AT=$(echo "$PR" | jq -r '.closed_at')
                  PR_MERGED_AT=$(echo "$PR" | jq -r '.merged_at')
                  PR_STATUS=$(echo "$PR" | jq -r '.state')
                  REPO_IDENTIFIER=$(echo "$PR" | jq -r '.head.repo.full_name')
                  PR_CREATOR=$(echo "$PR" | jq -r '.user.login')
      
                curl --location --request POST "https://api.getport.io/v1/blueprints/${BLUEPRINT_ID}/entities?upsert=true&merge=true&run_id=${{fromJson(inputs.port_payload).runId}}" \
                  --header "Authorization: Bearer ${{ env.PORT_ACCESS_TOKEN }}" \
                  --header "Content-Type: application/json" \
                  --data-raw "{
                    \"identifier\": \"${PR_IDENTIFIER}\",
                    \"title\": \"${PR_TITLE}\",
                    \"properties\": {
                      \"status\": \"${PR_STATUS}\",
                      \"closedAt\": \"${PR_CLOSED_AT}\",
                      \"updatedAt\": \"${PR_CLOSED_AT}\",
                      \"mergedAt\": \"${PR_MERGED_AT}\",
                      \"createdAt\": \"${PR_CREATED_AT}\",
                      \"link\": \"${PR_LINK}\",
                      \"prNumber\": ${PR_NUMBER},
                      \"branch\": \"${PR_BRANCH}\"
                    },
                    \"relations\": {
                      \"repository\": \"${REPO_IDENTIFIER}\",
                      \"git_hub_creator\": \"${PR_CREATOR}\"
                    }
                  }"
                fi
              done

              ((PAGE++))
            done
          done

      - name: Inform entity upsert failure
        if: steps.upsert_pr_entity.outcome == 'failure'
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.DORA_PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.DORA_PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(inputs.port_payload).runId}}
          logMessage: "Failed to report the created entities back to Port ..."

      - name: Inform completion of pull request upsert
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.DORA_PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.DORA_PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(inputs.port_payload).runId}}
          logMessage: "Fetching of historical PR was successful ✅"
