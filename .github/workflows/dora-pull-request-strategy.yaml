name: Fetch and Send PR Data

on:
  workflow_dispatch:
    inputs:
      config:
        description: 'JSON input configuration for fetching PRs'
        required: true
        type: string
      port_payload:
        required: true
        description: Port's payload, including details for who triggered the action and general context (blueprint, run id, etc...)

jobs:
  fetch-prs:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Inform execution of request to fetch historical pull request data
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.DORA_PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.DORA_PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(inputs.port_payload).runId}}
          logMessage: "About to fetch pull request data from GitHub..."

      - name: Parse Input Configuration
        id: parse_config
        run: |
          echo '${{ inputs.config }}' > config.json
          CONFIG_JSON=$(jq -c . config.json)  # Proper JSON parsing
          echo "CONFIG_JSON=$CONFIG_JSON" >> "$GITHUB_ENV"


      - name: Extract Filters from JSON
        id: extract_filters
        run: |
          CONFIG_JSON=$(echo '${{ env.CONFIG_JSON }}' | jq -c .)

          # Extract individual fields
          DEPLOY_BRANCH=$(echo "$CONFIG_JSON" | jq -r '.deploy_branch // "main"')
          PR_RULES_FIELDS=$(echo "$CONFIG_JSON" | jq -c '.pr_rules_fields // []')
          PR_STATUS_OP=$(echo "$CONFIG_JSON" | jq -r '.pr_rules_status_op // empty')
          PR_STATUS_VALUE=$(echo "$CONFIG_JSON" | jq -r '.pr_rules_status_options // empty')
          PR_AUTHOR_OP=$(echo "$CONFIG_JSON" | jq -r '.pr_rules_author_op // empty')
          PR_AUTHORS=$(echo "$CONFIG_JSON" | jq -c '.pr_rules_author // []')
          PR_LABEL_OP=$(echo "$CONFIG_JSON" | jq -r '.pr_rules_label_op // empty')
          PR_LABEL_VALUE=$(echo "$CONFIG_JSON" | jq -r '.pr_rules_label_str // empty')
          PR_REPO_OP=$(echo "$CONFIG_JSON" | jq -r '.pr_rules_repo_op // empty')
          PR_REPO_VALUE=$(echo "$CONFIG_JSON" | jq -r '.pr_rules_repo_str // empty')

          echo "DEPLOY_BRANCH=$DEPLOY_BRANCH" >> "$GITHUB_ENV"
          echo "PR_RULES_FIELDS=$PR_RULES_FIELDS" >> "$GITHUB_ENV"
          echo "PR_STATUS_OP=$PR_STATUS_OP" >> "$GITHUB_ENV"
          echo "PR_STATUS_VALUE=$PR_STATUS_VALUE" >> "$GITHUB_ENV"
          echo "PR_AUTHOR_OP=$PR_AUTHOR_OP" >> "$GITHUB_ENV"
          echo "PR_AUTHORS=$PR_AUTHORS" >> "$GITHUB_ENV"
          echo "PR_LABEL_OP=$PR_LABEL_OP" >> "$GITHUB_ENV"
          echo "PR_LABEL_VALUE=$PR_LABEL_VALUE" >> "$GITHUB_ENV"
          echo "PR_REPO_OP=$PR_REPO_OP" >> "$GITHUB_ENV"
          echo "PR_REPO_VALUE=$PR_REPO_VALUE" >> "$GITHUB_ENV"

      - name: Fetch All Repositories (if no repo filter applied)
        if: ${{ !contains(env.PR_RULES_FIELDS, 'Repository') }}
        id: fetch_repos
        run: |
          GH_TOKEN=${{ secrets.DORA_GITHUB_TOKEN }}
          REPOS=()
          PAGE=1

          while :; do
            RESPONSE=$(curl -s -H "Authorization: token $GH_TOKEN" \
              "https://api.github.com/user/repos?per_page=100&page=$PAGE")

            NEW_REPOS=$(echo "$RESPONSE" | jq -r '.[].full_name')
            if [[ -z "$NEW_REPOS" ]]; then break; fi

            REPOS+=($NEW_REPOS)
            ((PAGE++))
          done

          echo "REPO_LIST=${REPOS[*]}" >> "$GITHUB_ENV"

      - name: Fetch PR Data
        run: |
          GH_TOKEN=${{ secrets.DORA_GITHUB_TOKEN }}
          REPOS=(${{ env.REPO_LIST }})
          THREE_MONTHS_AGO=$(date -d '3 months ago' --utc +%Y-%m-%dT%H:%M:%SZ)
          
          FILTERED_PRS="[]"
      
          for REPO in "${REPOS[@]}"; do
            echo "Processing repo: $REPO"
            PAGE=1
            STOP_FETCHING=false
      
            while [[ "$STOP_FETCHING" == "false" ]]; do
              RESPONSE=$(curl -s -H "Authorization: token $GH_TOKEN" \
                "https://api.github.com/repos/$REPO/pulls?state=closed&per_page=100&page=$PAGE")
      
              if ! echo "$RESPONSE" | jq empty 2>/dev/null; then
                echo "❌ Invalid JSON response. Dumping response:"
                echo "$RESPONSE"
                exit 1
              fi
              echo "✅ Valid JSON response received."
      
              PR_COUNT=$(echo "$RESPONSE" | jq '. | length')
              if [[ "$PR_COUNT" -eq 0 ]]; then
                echo "No more PRs found for $REPO. Moving to the next repo..."
                break
              fi
      
              INDEX=0
              while [[ "$INDEX" -lt "$PR_COUNT" ]]; do
                PR=$(echo "$RESPONSE" | jq -c ".[$INDEX]")
      
                if ! echo "$PR" | jq empty 2>/dev/null; then
                  echo "⚠ Warning: Skipping malformed PR JSON"
                  ((INDEX++))
                  continue
                fi
      
                PR_CREATED_AT=$(echo "$PR" | jq -r '.created_at // empty')
                if [[ -z "$PR_CREATED_AT" ]]; then
                  echo "⚠ Warning: Missing created_at field for PR. Skipping..."
                  ((INDEX++))
                  continue
                fi
      
                echo "Processing PR..."
                echo "Created at: $PR_CREATED_AT"
      
                if [[ "$PR_CREATED_AT" < "$THREE_MONTHS_AGO" ]]; then
                  echo "PR is older than 3 months. Stopping further fetch for $REPO."
                  STOP_FETCHING=true
                  break
                fi
      
                # ✅ Fix: Append PR safely
                echo "PR Data: $PR"
                FILTERED_PRS=$(jq --argjson newPR "$PR" '. + [$newPR]' <<< "$FILTERED_PRS")
                echo "❌ After PR Data"
                ((INDEX++))
              done
      
              if [[ "$STOP_FETCHING" == "true" ]]; then
                break
              fi
      
              ((PAGE++))
              sleep 1
            done
          done
      
          echo "FINAL_PR_DATA=$FILTERED_PRS" >> "$GITHUB_ENV"


      - name: Send Data to Port
        run: |
          curl -X POST "https://api.port.io/push-data" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.PORT_API_TOKEN }}" \
            -d '{
              "integration": "GitHub",
              "type": "PR/MR merge",
              "data": ${{ env.FINAL_PR_DATA }}
            }'
