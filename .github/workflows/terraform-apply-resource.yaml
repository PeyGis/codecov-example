name: Terraform Apply
on:
  workflow_dispatch:
    inputs:
      # tf_apply_run_identifier:
      #   type: string
      #   required: true
      port_payload:
        required: true
        description: Port's payload, including details for who triggered the action and
          general context (blueprint, run id, etc...)
        type: string
jobs:
  apply-and-provision-resource:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Log starting of cloud resource creation 
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ fromJson(inputs.port_payload).context.runId }}
          logMessage: |
              About to provision a cloud resource planned in Port with run ID: ${{ github.event.inputs.tf_apply_run_identifier }} .. ⛴️

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
          aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
          aws-session-token: '${{ secrets.AWS_SESSION_TOKEN }}'
          aws-region: '${{ secrets.AWS_REGION }}'


     # Download Terraform plan artifact from the previous workflow run
      - name: Download Terraform Plan Artifact
        run: |
          mkdir terraform-artifact
          curl -sSL -o terraform-artifact/terraform-artifact.zip -H "Authorization: Bearer ${{ secrets.MY_GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/tfport-r_CQx19Ix1Lawf3IW8/zip"

          # curl \
          #   -H "Authorization: Bearer ${{ secrets.MY_GITHUB_TOKEN }}" \
          #   -H "Accept: application/vnd.github.v3.raw" \
          #   -o terraform-artifact/terraform-artifact.zip \
          #   -L "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/tfport-r_CQx19Ix1Lawf3IW8/zip"

      # List contents of the app directory
      - name: List all Directory Contents
        run: ls -la 
        
      # List contents of the app directory
      - name: List app Directory Contents
        run: ls -la terraform-artifact
        
     # Unzip the downloaded zip file
      - name: Unzip Terraform Plan File
        run: |
          file terraform-artifact/terraform-artifact.zip
          unzip -qq terraform-artifact/terraform-artifact.zip
          
      # List contents of the app directory
      - name: List app Directory Contents
        run: ls -la
        
     # # Move the extracted plan file to the appropriate directory
     #  - name: Move Terraform Plan File
     #    run: |
     #      mkdir -p app  # Create the directory if it doesn't exist
     #      mv /tmp/tfapply.tfplan app/tfapply.tfplan
          
      # - name: Download Plan Artifact
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: tfport-r_CQx19Ix1Lawf3IW8 # tfport-${{github.event.inputs.tf_apply_run_identifier}}
      #     path: tfapply.tfplan
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
          
      - name: Terraform Apply
        id:   tf-apply
        run: |
          cd terraform-artifact  # Navigate to the directory containing the plan file tfapply.tfplan
          terraform apply -auto-approve
          
      - name: Update Port on status of applying terraform resource
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ fromJson(inputs.port_payload).context.runId }}
          logMessage: |
              cloud resource successfully provisioned ✅
