name: Apply Sonar Scan on PR

on:
  workflow_dispatch:
    inputs:
      prNumber:
        required: true
        type: string
      repository:
        required: true
        type: string
      sonarEntity:
        required: true
        type: string

jobs:
  analyze_sonar:
    runs-on: ubuntu-latest
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
      GH_TOKEN: ${{ secrets.PERSONAL_GH_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Fetch Port Access Token
        id: fetch_port_token
        run: |
          PORT_ACCESS_TOKEN=$(curl -s -L 'https://api.getport.io/v1/auth/access_token' \
            -H 'Content-Type: application/json' \
            -H 'Accept: application/json' \
            -d '{
              "clientId": "${{ secrets.PORT_CLIENT_ID }}",
              "clientSecret": "${{ secrets.PORT_CLIENT_SECRET }}"
            }' | jq -r '.accessToken')

          echo "PORT_ACCESS_TOKEN=$PORT_ACCESS_TOKEN" >> "$GITHUB_ENV"

      - name: Get Sonar Entity from Port
        id: get_sonar
        run: |
          sonar_entity_id="${{ github.event.inputs.sonarEntity }}"
          echo "üîç Fetching Sonar entity $sonar_entity_id"

          sonar_response=$(curl -i -s -w "\n%{http_code}" -X GET "https://api.port.io/v1/blueprints/sonarQubeAnalysis/entities/$sonar_entity_id" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ env.PORT_ACCESS_TOKEN }}")

          sonar_body=$(echo "$sonar_response" | sed '$d')
          sonar_status=$(echo "$sonar_response" | tail -n1)

          echo "üì¶ Sonar API response ($sonar_status):"
          echo "$sonar_body"

          if [ "$sonar_status" -ne 200 ]; then
            echo "‚ùå Failed to fetch Sonar entity"
            exit 1
          fi

          echo "SONAR_ISSUES=$(echo "$sonar_body" | jq '.entity.properties.newIssues // 0')" >> "$GITHUB_ENV"
          echo "SONAR_COVERAGE=$(echo "$sonar_body" | jq '.entity.properties.coverage // 0')" >> "$GITHUB_ENV"
          echo "SONAR_DUPLICATIONS=$(echo "$sonar_body" | jq '.entity.properties.duplications // 0')" >> "$GITHUB_ENV"
          echo "SONAR_BRANCH=$(echo "$sonar_body" | jq -r '.entity.properties.branch')" >> "$GITHUB_ENV"

      - name: Add PR Label with Sonar Results
        run: |
          pr_number=$(echo "${{ github.event.inputs.prNumber }}" | grep -o '[0-9]\+$')
          label_name="Sonar: $SONAR_ISSUES issues, $SONAR_COVERAGE% coverage"

          echo "üè∑Ô∏è Creating label: $label_name"

          label_response=$(curl -i -s -w "\n%{http_code}" -X POST "https://api.github.com/repos/${{ github.repository }}/labels" \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            -d "{\"name\": \"$label_name\", \"color\": \"0366d6\"}")

          label_body=$(echo "$label_response" | sed '$d')
          label_status=$(echo "$label_response" | tail -n1)

          echo "üì¶ Label creation response ($label_status):"
          echo "$label_body"

          # Ignore errors if label already exists
          if [ "$label_status" -ne 201 ] && [ "$label_status" -ne 422 ]; then
            echo "‚ùå Failed to create label"
            exit 1
          fi

          echo "üè∑Ô∏è Applying label to PR $pr_number..."

          apply_response=$(curl -i -s -w "\n%{http_code}" -X POST "https://api.github.com/repos/${{ github.event.inputs.repository }}/issues/$pr_number/labels" \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            -d "{\"labels\": [\"$label_name\"]}")

          apply_body=$(echo "$apply_response" | sed '$d')
          apply_status=$(echo "$apply_response" | tail -n1)

          echo "üì¶ Apply label response ($apply_status):"
          echo "$apply_body"

          if [ "$apply_status" -ne 200 ]; then
            echo "‚ùå Failed to apply label to PR"
            exit 1
          fi
