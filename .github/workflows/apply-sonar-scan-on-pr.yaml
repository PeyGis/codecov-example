name: Apply Sonar Scan on PR

on:
  workflow_dispatch:
    inputs:
      prNumber:
        required: true
        type: string
      repository:
        required: true
        type: string
      sonarEntity:
        required: true
        type: string

jobs:
  analyze_sonar:
    runs-on: ubuntu-latest
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
      GH_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Fetch Port Access Token
        id: fetch_port_token
        run: |
          PORT_ACCESS_TOKEN=$(curl -s -L 'https://api.getport.io/v1/auth/access_token' \
            -H 'Content-Type: application/json' \
            -H 'Accept: application/json' \
            -d '{
              "clientId": "${{ secrets.PORT_CLIENT_ID }}",
              "clientSecret": "${{ secrets.PORT_CLIENT_SECRET }}"
            }' | jq -r '.accessToken')
          echo "PORT_ACCESS_TOKEN=$PORT_ACCESS_TOKEN" >> "$GITHUB_ENV"

      - name: Get Sonar Entity from Port
        id: get_sonar
        run: |
          sonar_entity_id="${{ github.event.inputs.sonarEntity }}"
          echo "🔍 Fetching Sonar entity $sonar_entity_id"

          sonar_response=$(curl -s -X GET "https://api.port.io/v1/blueprints/sonarQubeAnalysis/entities/$sonar_entity_id" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ env.PORT_ACCESS_TOKEN }}")

          echo "$sonar_response"

          FIXED_ISSUES=$(echo "$sonar_response" | jq '.entity.properties.fixedIssues // 0')
          NEW_ISSUES=$(echo "$sonar_response" | jq '.entity.properties.newIssues // 0')
          COVERAGE=$(echo "$sonar_response" | jq '.entity.properties.coverage // 0')
          DUPLICATIONS=$(echo "$sonar_response" | jq '.entity.properties.duplications // 0')

          echo "FIXED_ISSUES=$FIXED_ISSUES" >> "$GITHUB_ENV"
          echo "NEW_ISSUES=$NEW_ISSUES" >> "$GITHUB_ENV"
          echo "COVERAGE=$COVERAGE" >> "$GITHUB_ENV"
          echo "DUPLICATIONS=$DUPLICATIONS" >> "$GITHUB_ENV"

      - name: Classify and Apply Sonar Labels
        run: |
          set -e

          repo="${{ github.event.inputs.repository }}"
          owner="${{ github.repository_owner }}"
          pr_number=$(echo "${{ github.event.inputs.prNumber }}" | grep -o '[0-9]\+$')

          # Classify coverage
          if (( $(echo "$COVERAGE < 25" | bc -l) )); then
            coverage_label="Sonar: Coverage - 0-25%"
          elif (( $(echo "$COVERAGE < 50" | bc -l) )); then
            coverage_label="Sonar: Coverage - 25-50%"
          elif (( $(echo "$COVERAGE < 75" | bc -l) )); then
            coverage_label="Sonar: Coverage - 50-75%"
          else
            coverage_label="Sonar: Coverage - 75-100%"
          fi

          # Classify new issues
          if (( NEW_ISSUES == 0 )); then
            new_issues_label="Sonar: Issues - A"
          elif (( NEW_ISSUES <= 5 )); then
            new_issues_label="Sonar: Issues - B"
          elif (( NEW_ISSUES <= 10 )); then
            new_issues_label="Sonar: Issues - C"
          elif (( NEW_ISSUES <= 20 )); then
            new_issues_label="Sonar: Issues - D"
          else
            new_issues_label="Sonar: Issues - E"
          fi

          # Classify fixed issues
          if (( FIXED_ISSUES == 0 )); then
            fixed_issues_label="Sonar: Fixed - A"
          elif (( FIXED_ISSUES <= 5 )); then
            fixed_issues_label="Sonar: Fixed - B"
          elif (( FIXED_ISSUES <= 10 )); then
            fixed_issues_label="Sonar: Fixed - C"
          elif (( FIXED_ISSUES <= 20 )); then
            fixed_issues_label="Sonar: Fixed - D"
          else
            fixed_issues_label="Sonar: Fixed - E"
          fi

          # Classify duplications
          if (( $(echo "$DUPLICATIONS < 5" | bc -l) )); then
            dup_label="Sonar: Duplication - A"
          elif (( $(echo "$DUPLICATIONS < 10" | bc -l) )); then
            dup_label="Sonar: Duplication - B"
          elif (( $(echo "$DUPLICATIONS < 20" | bc -l) )); then
            dup_label="Sonar: Duplication - C"
          elif (( $(echo "$DUPLICATIONS < 30" | bc -l) )); then
            dup_label="Sonar: Duplication - D"
          else
            dup_label="Sonar: Duplication - E"
          fi

          labels_to_apply=("$coverage_label" "$new_issues_label" "$fixed_issues_label" "$dup_label")

          echo "🏷️ Will apply labels: ${labels_to_apply[*]}"

          # Define a function to assign colors based on grade
          get_label_color() {
            label="$1"
            if [[ "$label" == *" - A" || "$label" == *"75-100%" ]]; then
              echo "2cbe4e"  # Green
            elif [[ "$label" == *" - B" || "$label" == *"50-75%" ]]; then
              echo "a2eeef"  # Light blue
            elif [[ "$label" == *" - C" || "$label" == *"25-50%" ]]; then
              echo "fbca04"  # Yellow
            elif [[ "$label" == *" - D" || "$label" == *"0-25%" ]]; then
              echo "f66a0a"  # Orange
            else
              echo "d73a4a"  # Red for E or anything else
            fi
          }

          # Create labels if they don’t exist, using dynamic colors
          for label in "${labels_to_apply[@]}"; do
            color=$(get_label_color "$label")
            echo "🛠️ Ensuring label exists: $label with color #$color"
            curl -s -o /dev/null -w "%{http_code}" -X POST "https://api.github.com/repos/$owner/$repo/labels" \
              -H "Authorization: Bearer $GH_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              -d "{\"name\": \"$label\", \"color\": \"$color\"}" | grep -qE "201|422"
          done

          # # Create labels if they don’t exist
          # for label in "${labels_to_apply[@]}"; do
          #   echo "🛠️ Ensuring label exists: $label"

          #   curl -s -o /dev/null -w "%{http_code}" -X POST "https://api.github.com/repos/$owner/$repo/labels" \
          #     -H "Authorization: Bearer $GH_TOKEN" \
          #     -H "Accept: application/vnd.github+json" \
          #     -d "{\"name\": \"$label\", \"color\": \"0366d6\"}" | grep -qE "201|422"
          # done

          # Apply to PR
          echo "🏷️ Applying labels to PR #$pr_number..."
          curl -s -X POST "https://api.github.com/repos/$owner/$repo/issues/$pr_number/labels" \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            -d "{\"labels\": [\"${labels_to_apply[0]}\", \"${labels_to_apply[1]}\", \"${labels_to_apply[2]}\", \"${labels_to_apply[3]}\"]}"
